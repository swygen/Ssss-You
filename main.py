import logging
from aiogram import Bot, Dispatcher, executor, types
import requests
import asyncio
from keep_alive import keep_alive
from datetime import datetime, timedelta

API_TOKEN = '7310009275:AAGsgHRrHfclSgGE4wLA8yWz9RWAFEmufP4'
RAPIDAPI_KEY = 'b4d6936178mshafaf4aec9942f2ap16237ejsn4249014c201e'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_links = {}
user_limits = {}  # ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐ ржЕржирзБржпрж╛рзЯрзА ржбрж╛ржЙржирж▓рзЛржб рж▓рж┐ржорж┐ржЯ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░ржмрзЗ

WELCOME_MSG = """ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо, {name}!

ржПржЗ ржмржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЖржкржирж┐ рж╕рж╣ржЬрзЗржЗ TikTok ржнрж┐ржбрж┐ржУ **Watermark ржЫрж╛рзЬрж╛** ржбрж╛ржЙржирж▓рзЛржб ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред

тЬи ржлрж┐ржЪрж╛рж░:
- тЬЕ ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб
- тЬЕ ржЕржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб
- тЬЕ ржбрзЗржЗрж▓рж┐ рззрзлржЯрж┐ ржлрзНрж░рж┐ ржбрж╛ржЙржирж▓рзЛржб (Free Membership)

ржирж┐ржЪрзЗ ржерзЗржХрзЗ ржПржХржЯрж┐ ржЕржкрж╢ржи ржмрзЗржЫрзЗ ржирж┐ржи:"""

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("тЦ╢я╕П Download Video", "ЁЯСитАНЁЯТ╗ Developer", "тнР Membership")
    await message.answer(WELCOME_MSG.format(name=message.from_user.first_name), reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "тЦ╢я╕П Download Video")
async def ask_for_link(message: types.Message):
    await message.reply("ЁЯФЧ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ TikTok ржнрж┐ржбрж┐ржУрж░ рж▓рж┐ржВржХ ржкрж╛ржарж╛ржиред")

@dp.message_handler(lambda message: message.text == "ЁЯСитАНЁЯТ╗ Developer")
async def show_developer_info(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("ЁЯУй Admin Contact", url="https://t.me/Swygen_bot"))
    await message.reply("ржПржЗ ржмржЯржЯрж┐ рждрзИрж░рж┐ ржХрж░рзЗржЫрзЗржи Swygen Officialред\nржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рждрзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи:", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "тнР Membership")
async def show_membership(message: types.Message):
    await message.reply("ржЖржкржирж┐ ржмрж░рзНрждржорж╛ржирзЗ тнР Free Membership-ржП ржЖржЫрзЗржиред\nржкрзНрж░рждрж┐ржжрж┐ржи рззрзлржЯрж┐ ржнрж┐ржбрж┐ржУ/ржЕржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред\n\nржбрж╛ржЙржирж▓рзЛржб ржХрж░рждрзЗ тЦ╢я╕П Download Video ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред")

@dp.message_handler(lambda message: "tiktok.com" in message.text)
async def ask_format(message: types.Message):
    user_links[message.from_user.id] = message.text
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("ЁЯОм Download Video", callback_data="download_video"),
        types.InlineKeyboardButton("ЁЯО╡ Download Audio", callback_data="download_audio")
    )
    await message.reply("ржЖржкржирж┐ ржХрзЛржи ржлрж░ржорзНржпрж╛ржЯрзЗ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рждрзЗ ржЪрж╛ржи?", reply_markup=keyboard)

def check_limit(user_id):
    today = datetime.now().date()
    if user_id not in user_limits:
        user_limits[user_id] = {"date": today, "count": 0}
    elif user_limits[user_id]["date"] != today:
        user_limits[user_id] = {"date": today, "count": 0}
    return user_limits[user_id]["count"] < 15

def increment_limit(user_id):
    user_limits[user_id]["count"] += 1

@dp.callback_query_handler(lambda c: c.data in ["download_video", "download_audio"])
async def process_download_option(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if not check_limit(user_id):
        await callback_query.message.answer("тЪая╕П ржЖржкржирж┐ ржЖржЬржХрзЗрж░ рззрзлржЯрж┐ ржлрзНрж░рж┐ ржбрж╛ржЙржирж▓рзЛржб рж╕рзАржорж╛ ржкрзВрж░рзНржг ржХрж░рзЗржЫрзЗржиред\nржЖржЧрж╛ржорзАржХрж╛рж▓ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        return

    tiktok_url = user_links.get(user_id)
    if not tiktok_url:
        await callback_query.message.answer("тЭМ рж▓рж┐ржВржХ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐, ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        return

    await callback_query.message.answer("тП│ ржбрж╛ржЙржирж▓рзЛржб рж╣ржЪрзНржЫрзЗ... ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи...")

    api_url = "https://tiktok-downloader-download-tiktok-videos-without-watermark.p.rapidapi.com/index"
    headers = {
        "x-rapidapi-host": "tiktok-downloader-download-tiktok-videos-without-watermark.p.rapidapi.com",
        "x-rapidapi-key": RAPIDAPI_KEY
    }
    params = {"url": tiktok_url}

    try:
        response = requests.get(api_url, headers=headers, params=params)
        if response.status_code == 200:
            data = response.json()
            if callback_query.data == "download_video":
                video_url = data.get("video", [None])[0]
                if video_url:
                    sent_msg = await callback_query.message.answer_video(video_url, caption="тЬЕ ржнрж┐ржбрж┐ржУ рж╕ржлрж▓ржнрж╛ржмрзЗ ржбрж╛ржЙржирж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ!")
                else:
                    await callback_query.message.answer("тЭМ ржнрж┐ржбрж┐ржУ рж▓рж┐ржВржХ ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
                    return
            else:
                music_url = data.get("music")
                if music_url:
                    sent_msg = await callback_query.message.answer_audio(music_url, caption="тЬЕ ржЕржбрж┐ржУ рж╕ржлрж▓ржнрж╛ржмрзЗ ржбрж╛ржЙржирж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ!")
                else:
                    await callback_query.message.answer("тЭМ ржПржЗ ржнрж┐ржбрж┐ржУрж░ ржЬржирзНржп ржЖрж▓рж╛ржжрж╛ ржЕржбрж┐ржУ ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
                    return

            increment_limit(user_id)
            await callback_query.answer()

            feedback_keyboard = types.InlineKeyboardMarkup()
            feedback_keyboard.add(types.InlineKeyboardButton("тнР ржорждрж╛ржоржд ржжрж┐ржи", url="https://t.me/Swygen_bd"))
            await callback_query.message.answer("ржЖржкржирж╛рж░ ржЕржнрж┐ржЬрзНржЮрждрж╛ ржХрзЗржоржи ржЫрж┐рж▓? ржирж┐ржЪрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржЬрж╛ржирж╛ржи:", reply_markup=feedback_keyboard)

            await asyncio.sleep(3600)
            await sent_msg.delete()
        else:
            await callback_query.message.answer("тЭМ ржбрж╛ржЙржирж▓рзЛржбрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ, ржХрж┐ржЫрзБржХрзНрж╖ржг ржкрж░рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
    except Exception as e:
        await callback_query.message.answer(f"тЪая╕П рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗ: {str(e)}")

if __name__ == '__main__':
    keep_alive()
    executor.start_polling(dp, skip_updates=True)
