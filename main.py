import logging
from aiogram import Bot, Dispatcher, executor, types
import requests
import asyncio
from keep_alive import keep_alive  # ржмржЯ ржЪрж╛рж▓рзБ рж░рж╛ржЦрж╛рж░ ржЬржирзНржп

# Bot Token & RapidAPI Token
API_TOKEN = '7310009275:AAGsgHRrHfclSgGE4wLA8yWz9RWAFEmufP4'
RAPIDAPI_KEY = 'b4d6936178mshafaf4aec9942f2ap16237ejsn4249014c201e'

# рж▓ржЧрж┐ржВ рж╢рзБрж░рзБ
logging.basicConfig(level=logging.INFO)

# Bot рж╕рзЗржЯржЖржк
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# ржЗржЙржЬрж╛рж░ рж▓рж┐ржВржХ рж░рж╛ржЦрж╛рж░ ржЬржирзНржп
user_links = {}

# рж╕рзНржмрж╛ржЧрждржо ржорзЗрж╕рзЗржЬ
WELCOME_MSG = """
<b>рж╕рзНржмрж╛ржЧрждржо, {name}!</b>  
тЬи ржПржЗ ржмржЯржЯрж┐рж░ ржорж╛ржзрзНржпржорзЗ ржЖржкржирж┐ рж╕рж╣ржЬрзЗржЗ TikTok ржнрж┐ржбрж┐ржУ <b>Watermark ржЫрж╛ржбрж╝рж╛ржЗ</b> ржбрж╛ржЙржирж▓рзЛржб ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи!

<b>ржмрзИрж╢рж┐рж╖рзНржЯрзНржпрж╕ржорзВрж╣:</b>
ЁЯОе ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб (HD, No Watermark)  
ЁЯО╡ ржЕржбрж┐ржУ ржПржХрзНрж╕ржЯрзНрж░рж╛ржХрж╢ржи  
тЪб ржжрзНрж░рзБржд ржУ ржирж┐рж░рзНржнрж░ржпрзЛржЧрзНржп рж╕рж╛рж░рзНржнрж╛рж░  

<b>ржирж┐ржЪрзЗ ржерзЗржХрзЗ ржПржХржЯрж┐ ржЕржкрж╢ржи ржмрзЗржЫрзЗ ржирж┐ржи:</b>
"""

# Start ржХржорж╛ржирзНржб
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("ЁЯОм Download Video", "ЁЯСитАНЁЯТ╗ Developer")
    await message.answer(WELCOME_MSG.format(name=message.from_user.first_name), reply_markup=keyboard)

# Download Video ржЕржкрж╢ржи
@dp.message_handler(lambda message: message.text == "ЁЯОм Download Video")
async def ask_for_link(message: types.Message):
    await message.reply("ЁЯФЧ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╕рзЗржЗ TikTok ржнрж┐ржбрж┐ржУржЯрж┐рж░ рж▓рж┐ржВржХ ржжрж┐ржи ржпрзЗржЯрж┐ ржЖржкржирж┐ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рждрзЗ ржЪрж╛ржи:")

# Developer ржЕржкрж╢ржи
@dp.message_handler(lambda message: message.text == "ЁЯСитАНЁЯТ╗ Developer")
async def show_developer_info(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("ЁЯУЮ Admin Contact", url="https://t.me/Swygen_bot"))
    await message.reply("ЁЯЫая╕П <b>ржПржЗ ржмржЯржЯрж┐ рждрзИрж░рж┐ ржХрж░рзЗржЫрзЗржи:</b> <i>Swygen Official</i>\n\nржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рждрзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи:", reply_markup=keyboard)

# TikTok рж▓рж┐ржВржХ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
@dp.message_handler(lambda message: "tiktok.com" in message.text)
async def ask_format(message: types.Message):
    user_links[message.from_user.id] = message.text
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("ЁЯОе Download Video", callback_data="download_video"),
        types.InlineKeyboardButton("ЁЯО╡ Download Audio", callback_data="download_audio")
    )
    await message.reply("ржЖржкржирж┐ ржХрзЛржи ржлрж░ржорзНржпрж╛ржЯрзЗ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рждрзЗ ржЪрж╛ржи?", reply_markup=keyboard)

# ржбрж╛ржЙржирж▓рзЛржб ржЕржкрж╢ржи ржкрзНрж░рж╕рзЗрж╕
@dp.callback_query_handler(lambda c: c.data in ["download_video", "download_audio"])
async def process_download_option(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    tiktok_url = user_links.get(user_id)

    if not tiktok_url:
        await callback_query.message.answer("тЭЧ рж▓рж┐ржВржХ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐, ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        return

    await callback_query.message.answer("тП│ ржбрж╛ржЙржирж▓рзЛржб ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ рж╢рзБрж░рзБ рж╣ржпрж╝рзЗржЫрзЗ... ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи...")

    api_url = "https://tiktok-downloader-download-tiktok-videos-without-watermark.p.rapidapi.com/index"
    headers = {
        "x-rapidapi-host": "tiktok-downloader-download-tiktok-videos-without-watermark.p.rapidapi.com",
        "x-rapidapi-key": RAPIDAPI_KEY
    }
    params = {"url": tiktok_url}

    try:
        response = requests.get(api_url, headers=headers, params=params)
        if response.status_code == 200:
            data = response.json()
            if callback_query.data == "download_video":
                video_url = data["video"][0]
                sent_msg = await callback_query.message.answer_video(video_url, caption="тЬЕ ржЖржкржирж╛рж░ ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзНрждрзБржд!")
            else:
                music_url = data["music"]
                sent_msg = await callback_query.message.answer_audio(music_url, caption="тЬЕ ржЕржбрж┐ржУ ржкрзНрж░рж╕рзНрждрзБржд!")

            await callback_query.answer()

            feedback_keyboard = types.InlineKeyboardMarkup()
            feedback_keyboard.add(types.InlineKeyboardButton("ЁЯТм Contact Admin", url="https://t.me/Swygen_bd"))
            await callback_query.message.answer("тнР <b>рж╕рж╛рж░рзНржнрж┐рж╕ржЯрж┐ ржХрзЗржоржи рж▓рж╛ржЧрж▓рзЛ?</b> ржЖржкржирж╛рж░ ржорждрж╛ржоржд ржЬрж╛ржирж╛рждрзЗ ржнрзБрж▓ржмрзЗржи ржирж╛:", reply_markup=feedback_keyboard)

            await asyncio.sleep(3600)
            await sent_msg.delete()
        else:
            await callback_query.message.answer("тЪая╕П ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржбрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗ, ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
    except Exception as e:
        await callback_query.message.answer(f"тЭМ <b>рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗ:</b> {e}")

# Keep alive ржПржмржВ ржмржЯ ржЪрж╛рж▓рзБ
if __name__ == '__main__':
    keep_alive()
    executor.start_polling(dp, skip_updates=True)
