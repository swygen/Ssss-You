import logging
from aiogram import Bot, Dispatcher, executor, types
import requests
import asyncio
from keep_alive import keep_alive

# Bot Token & API Key
API_TOKEN = '7310009275:AAGsgHRrHfclSgGE4wLA8yWz9RWAFEmufP4'
RAPIDAPI_KEY = 'b4d6936178mshafaf4aec9942f2ap16237ejsn4249014c201e'
CHANNEL_USERNAME = '@swygenbd'

# Logging
logging.basicConfig(level=logging.INFO)

# Setup
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# Store user links
user_links = {}
audio_links = {}

WELCOME_MSG = """üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, {name}!

‡¶è‡¶á ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶ø TikTok ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì Watermark ‡¶õ‡¶æ‡ßú‡¶æ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§

‚ú® ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞:
- ‚úÖ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
- ‚úÖ ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° (‡¶Ø‡¶¶‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü)

‡¶®‡¶ø‡¶ö‡ßá ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:"""

# Check channel membership
async def is_member(user_id):
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False

# Start handler
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if not await is_member(message.from_user.id):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ Join Now", url="https://t.me/swygenbd"),
            types.InlineKeyboardButton("‚úÖ Joined", callback_data="check_joined")
        )
        await message.answer("‚ùóÔ∏è‡¶è‡¶á ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:", reply_markup=keyboard)
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("‚ñ∂Ô∏è Download Video", "üë®‚Äçüíª Developer")
    await message.answer(WELCOME_MSG.format(name=message.from_user.first_name), reply_markup=keyboard)

# Check after "Joined" button clicked
@dp.callback_query_handler(lambda c: c.data == "check_joined")
async def check_joined(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if await is_member(user_id):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("‚ñ∂Ô∏è Download Video", "üë®‚Äçüíª Developer")
        await callback_query.message.answer(WELCOME_MSG.format(name=callback_query.from_user.first_name), reply_markup=keyboard)
        await callback_query.answer()
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ Join Now", url="https://t.me/swygenbd"),
            types.InlineKeyboardButton("‚úÖ Joined", callback_data="check_joined")
        )
        await callback_query.message.answer("‚ùóÔ∏è‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø‡•§ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:", reply_markup=keyboard)
        await callback_query.answer()

# Download menu
@dp.message_handler(lambda message: message.text == "‚ñ∂Ô∏è Download Video")
async def ask_for_link(message: types.Message):
    await message.reply("üîó ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá TikTok ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")

# Developer info
@dp.message_handler(lambda message: message.text == "üë®‚Äçüíª Developer")
async def show_developer_info(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üì© Admin Contact", url="https://t.me/Swygen_bot"))
    await message.reply("‡¶è‡¶á ‡¶¨‡¶ü‡¶ü‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶® Swygen Official‡•§", reply_markup=keyboard)

# TikTok link handler
@dp.message_handler(lambda message: "tiktok.com" in message.text)
async def ask_format(message: types.Message):
    user_links[message.from_user.id] = message.text
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("üé¨ Download Video", callback_data="download_video"),
        types.InlineKeyboardButton("üéµ Download Audio", callback_data="download_audio")
    )
    await message.reply("‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶® ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?", reply_markup=keyboard)

# Download processor
@dp.callback_query_handler(lambda c: c.data in ["download_video", "download_audio"])
async def process_download_option(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    tiktok_url = user_links.get(user_id)

    if not tiktok_url:
        await callback_query.message.answer("‚ùå ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    await callback_query.message.answer("‚è≥ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá... ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...")

    api_url = "https://tiktok-downloader-download-tiktok-videos-without-watermark.p.rapidapi.com/index"
    headers = {
        "x-rapidapi-host": "tiktok-downloader-download-tiktok-videos-without-watermark.p.rapidapi.com",
        "x-rapidapi-key": RAPIDAPI_KEY
    }
    params = {"url": tiktok_url}

    try:
        response = requests.get(api_url, headers=headers, params=params)
        if response.status_code == 200:
            data = response.json()
            sent_msg = None

            if callback_query.data == "download_video":
                video_url = data.get("video", [None])[0]
                if video_url:
                    sent_msg = await callback_query.message.answer_video(video_url, caption="‚úÖ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
                else:
                    await callback_query.message.answer("‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
                    return

            elif callback_query.data == "download_audio":
                music_url = data.get("music")
                if music_url:
                    if isinstance(music_url, list):
                        music_url = music_url[0]
                    audio_links[user_id] = music_url
                    download_button = types.InlineKeyboardMarkup()
                    download_button.add(types.InlineKeyboardButton("‚¨áÔ∏è ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="send_audio_file"))
                    await callback_query.message.answer("‚úÖ ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§! ‡¶®‡¶ø‡¶ö‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®:", reply_markup=download_button)
                else:
                    await callback_query.message.answer("‚ùå ‡¶è‡¶á ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
                    return

            await callback_query.answer()

            feedback_keyboard = types.InlineKeyboardMarkup()
            feedback_keyboard.add(types.InlineKeyboardButton("‚≠ê ‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§ ‡¶¶‡¶ø‡¶®", url="https://t.me/Swygen_bd"))
            await callback_query.message.answer("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ ‡¶ï‡ßá‡¶Æ‡¶® ‡¶õ‡¶ø‡¶≤? ‡¶®‡¶ø‡¶ö‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶®:", reply_markup=feedback_keyboard)

            if sent_msg:
                await asyncio.sleep(3600)
                try:
                    await sent_msg.delete()
                except:
                    pass
        else:
            await callback_query.message.answer("‚ùå ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
    except Exception as e:
        await callback_query.message.answer(f"‚ö†Ô∏è ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá: {str(e)}")

# Send audio file on button click
@dp.callback_query_handler(lambda c: c.data == "send_audio_file")
async def send_audio_file(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    music_url = audio_links.get(user_id)

    if music_url:
        try:
            await bot.send_audio(chat_id=user_id, audio=music_url, caption="‚úÖ ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
            await callback_query.answer()
        except Exception as e:
            await callback_query.message.answer(f"‚ùå ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø: {str(e)}")
    else:
        await callback_query.message.answer("‚ùå ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")

# Bot run
if __name__ == '__main__':
    keep_alive()
    executor.start_polling(dp, skip_updates=True)
